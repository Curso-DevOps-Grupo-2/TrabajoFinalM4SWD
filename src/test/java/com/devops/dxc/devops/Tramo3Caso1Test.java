package com.devops.dxc.devops;
// Generated by Selenium IDE
import org.junit.Test;
import org.junit.jupiter.params.shadow.com.univocity.parsers.annotations.Convert;
import org.mockito.Mock;

import static org.assertj.core.api.Assertions.assertThat;
// import static org.junit.Assert.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

import java.util.HashMap;
import java.util.Map;

import com.devops.dxc.devops.model.Dxc;
import com.devops.dxc.devops.model.Util;

import org.checkerframework.checker.nullness.compatqual.MonotonicNonNullDecl;
import org.junit.Before;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.http.ResponseEntity;
import org.openqa.selenium.JavascriptExecutor;

@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
public class Tramo3Caso1Test {

  private WebDriver driver;  
  JavascriptExecutor js;

  @Mock 
  // private Util util;  
  private Dxc dxc;  

  @Before
  public void setUp() {
    System.out.println("Iniciando configuraci√≥n...");
    System.setProperty("webdriver.chrome.driver","drivers/chromedriver.exe");
    driver = new ChromeDriver();    
  }

  @LocalServerPort
  private int port;

  @Autowired
  private TestRestTemplate restTemplate;

  @Test
  public void tramo3Caso1() {

    
     int sueldo =1500000 ;
     int ahorro =700000 ;

    // dxc = new Dxc(ahorro, sueldo);
    // Util.calcularSaldo(ahorro, sueldo, dxc);
    // Util.calcularImpuesto(sueldo, dxc);
    // Util.getDxc(ahorro, dxc);

    String url = "http://localhost:" + port + "/rest/msdxc/calcula-10?sueldo={sueldo}&ahorro={ahorro}";
    Map<String, Integer> params = new HashMap<String, Integer>();
    params.put("sueldo", sueldo);
    params.put("ahorro", ahorro);
    ResponseEntity<Dxc> result = this.restTemplate.getForEntity(url, Dxc.class, params);
    


    driver.get("http://localhost:4200/");
    driver.manage().window().setSize(new Dimension(820, 725));
    driver.findElement(By.id("mat-input-0")).click();
    driver.findElement(By.id("mat-input-0")).sendKeys("700000");  
    {
      WebElement element = driver.findElement(By.cssSelector(".mat-button-wrapper"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element).perform();
    }
    driver.findElement(By.id("mat-input-1")).sendKeys("1500000");
    driver.findElement(By.cssSelector(".mat-button-wrapper")).click();
    {
      WebElement element = driver.findElement(By.tagName("body"));
      Actions builder = new Actions(driver);
      builder.moveToElement(element, 0, 0).perform();
    }

    String diezXC;
    String saldoPost;
    String impuesto;
    {
      WebDriverWait wait = new WebDriverWait(driver, 1);       
      // wait.until(ExpectedConditions.not(ExpectedConditions.textToBe(By.id("resutl_10xc"),  "0")));
      // wait.until(ExpectedConditions.not(ExpectedConditions.textToBe(By.id("result_saldo_post"),  "0")));
      // wait.until(ExpectedConditions.not(ExpectedConditions.textToBe(By.id("result_impuesto"),  "0")));

      wait.until(ExpectedConditions.textToBe(By.id("resutl_10xc"),  ""+result.getBody().getDxc()));
      // wait.until(ExpectedConditions.textToBe(By.id("resutl_10xc"),  ""+dxc.getDxc()));
      // wait.until(ExpectedConditions.not(ExpectedConditions.textToBe(By.id("result_saldo_post"),  "0")));
      // wait.until(ExpectedConditions.not(ExpectedConditions.textToBe(By.id("result_impuesto"),  "0")));
    }
    
    diezXC = driver.findElement(By.id("result_10xc")).getText();
    saldoPost = driver.findElement(By.id("result_saldo_post")).getText();    
    impuesto = driver.findElement(By.id("result_impuesto")).getText();    


    assertNotEquals(0, Integer.parseInt(diezXC));
    assertNotEquals(0, Integer.parseInt(saldoPost));
    assertNotEquals(0, Integer.parseInt(impuesto));    

  }
}
